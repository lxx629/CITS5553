# This script is used on the Google colab to visualize the ocean species in the interactive map
# Input file:
# data/merged/new_fianl_species.csv
# data/merged/location_data.csv    # the location data from teammate

# output file: 
# data/visualization/species_map_search2.html

# install the package in colab
!pip -q install folium

import pandas as pd, numpy as np, folium
from folium.plugins import MarkerCluster, Search

# read the dataset
species_df = pd.read_csv("/content/final_species.csv")
location_df = pd.read_csv("/content/location_data.csv")

# combination
df = location_df.merge(species_df, on="aphia_id", how="left")

df = df[
    df["mr_latitude"].between(-90, 90) &
    df["mr_longitude"].between(-180, 180)
].drop_duplicates(subset=["aphia_id","species_canonical","mr_latitude","mr_longitude"]).copy()

def safe(v):
    return "—" if (pd.isna(v) or v in ("-", "[]")) else str(v)

def rng(a, b, unit=""):
    a_ok = not (pd.isna(a) or a in ("-", "[]"))
    b_ok = not (pd.isna(b) or b in ("-", "[]"))
    if not a_ok and not b_ok:
        return "— — —" if not unit else f"— — — {unit}".strip()
    if a_ok and b_ok:
        return f"{a} – {b}{(' ' + unit) if unit else ''}"
    only = a if a_ok else b
    return f"{only}{(' ' + unit) if unit else ''}"

# make the plot
m = folium.Map(
    location=[df["mr_latitude"].median(), df["mr_longitude"].median()],
    zoom_start=2, tiles="cartodbpositron"
)

feature_group = folium.FeatureGroup(name="Species Records")
m.add_child(feature_group)

cluster = MarkerCluster().add_to(feature_group)

for _, r in df.iterrows():
    species_name = safe(r.get('species_canonical'))
    
    popup_html = f"""
    <div style='font-size:13px; line-height:1.35'>
      <b>Species:</b> {species_name}<br>
      <b>Locality:</b> {safe(r.get('locality'))}<br>
      <b>Region:</b> {safe(r.get('higherGeography'))}<br>
      <b>Genus/Order/Family/Subfamily:</b> {safe(r.get('Genus'))} / {safe(r.get('order'))} / {safe(r.get('family_x'))} / {safe(r.get('Subfamily'))}<br>
      <b>Depth (m):</b> {rng(r.get('depth_min_in_m'), r.get('depth_max_in_m'), '')}<br>
      <b>Common depth (m):</b> {rng(r.get('common_depth_min'), r.get('common_depth_max'), '')}<br>
      <b>Length (cm):</b> {rng(r.get('length_max_in_cm'), r.get('common_length_in_cm'), '')}<br>
      <b>Weight (kg):</b> {rng(r.get('weight_max_in_g'), '')}<br>
      <b>Temp (°C):</b> {rng(r.get('TempMin'), r.get('TempMax'), '')}<br>
      <b>Source:</b> {safe(r.get('mr_source'))}
    </div>
    """

    marker = folium.CircleMarker(
        [float(r["mr_latitude"]), float(r["mr_longitude"])],
        radius=4, 
        fill=True, 
        fill_opacity=0.8,
        popup=folium.Popup(popup_html, max_width=360),
        tooltip=species_name,
        weight=0.5
    )
    
    marker.options['species_canonical'] = species_name
    
    marker.add_to(cluster)

species_search = Search(
    layer=feature_group,
    search_label='species_canonical',
    placeholder='Search for species...',
    collapsed=False,
    position='topleft'
).add_to(m)

folium.LayerControl().add_to(m)

# save the map
m.save("species_map_search2.html")
